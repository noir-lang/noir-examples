{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"9114839174653557245","abi":{"parameters":[{"name":"x","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"y","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"expect","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7ZjdbqMwEIXfhWsumDH+66tUUUVTWiEhEtGk0irKu6/NOdCtVuyusuKiUm5yQuL57DFnbMOleGmfz29P3fB6eC8eHi/F89j1fff21B/2zak7DOnXS1Hlj1qKBymLWiEGUkMsxEE8JEDiJLaCgGJBsaBYUCwoFhQLigXFguJAcaA4UBwoDhQHigPFgeJAcaB4UDwoHhQPigfFg+JB8aB4UDwoAZQASgAlgBJACaAEUAIoAZQASgQlghJBiaBEUCIoEZQISgQlgiJVRRWqUg21plqqo3pqoJIn5Al5Qp6QJ+QJeUKekCfkSeJpUq2oQk08vaYv2VoGjQ36rtH13W93v93mN6HfhH4T+m1S8pQ8JU/JU/KUPCXPkGfIM+QZ8gx5hjxDniGPFhd6XGhyocuFNhf6XGh0odOFVhd6XWh2oduFdhf6XWh4oeOFlhd6Xmh6oeuFthf6Xmh8ofOF1hd6X2h+ye7P9ZztP6mnBtS35vq+F9O9mLYuJmUxKYtJWUzZhCabcE6SDCJAYILMj+kxOybH3JgaM2NizItpMSsmxZyYEjNiQszn+25/iopVVKxe01zPB8en09i2ed5/OUmm8+WxGdvhVDwM574vi4+mP0+N3o/NMOmpGdO/VVm0w0vSBHzt+jZ/u5af0dV6aIjC4KhmCVf913hfe8b7UN0QH+fwVG1LuP06fLMebkLNeBPCLfFL+iba/+v/tnjv/x7/h+lLa848f2Z1/sJ2tz+tKXP/dVzrXzb0X9qh5wG49QHohgPwywDC6h2UesMBLPGqqxYQt90AVGcPaC2rA9jQhGrnIlTnvwxgl66afTf+9nwep0cpkenEJWba8yTdyDrf0LSe52lNq3Qi5kXtoxm75rlvc3Tmn4f9DEuXpx/H+Z/5dcBxPOzbl/PY5o4/3wmkTh41lCbs8ukjXaSjQJm2+d3yZJcb2NLYpYGvyuSw3Xw0zA1qV1q3NKhtmU6zu2Xbzj+6UHqzu+b8fwI=","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"use dep::std::println;\n\nfn main(x: [Field; 4], y: [Field; 4], expect: pub Field) {\n    let out = dotproduct(x, y);\n    println(\"x: \");\n    println(x);\n    println(\"y: \");\n    println(y);\n    println(\"computed dotproduct: \");\n    println(out);\n    assert(out == expect);\n}\n\nfn dotproduct(x: [Field; 4], y: [Field; 4]) -> Field {\n    let mut out = 0;\n    for i in 0..4 {\n        out += x[i] * y[i];\n    }\n    out\n}\n\n#[test]\nfn test_main() {\n    assert(dotproduct([1, 2, 3, 4], [5, 6, 7, 8]) == 70);\n}","path":"/home/cyprian/rustprograms/noir-examples/parameterized_dot_product/circuits/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained"]}