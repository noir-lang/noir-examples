"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BarretenbergWasm = exports.fetchModuleAndThreads = void 0;
const tslib_1 = require("tslib");
const comlink_1 = require("comlink");
const debug_1 = tslib_1.__importDefault(require("debug"));
const index_js_1 = require("./barretenberg_wasm_main/factory/node/index.js");
const index_js_2 = require("./helpers/node/index.js");
const index_js_3 = require("./barretenberg_wasm_main/index.js");
const index_js_4 = require("./fetch_code/index.js");
async function fetchModuleAndThreads(desiredThreads = 32, wasmPath, logger = (0, debug_1.default)('bb.js:fetch_mat')) {
    const shared = (0, index_js_2.getSharedMemoryAvailable)();
    const availableThreads = shared ? await getAvailableThreads(logger) : 1;
    // We limit the number of threads to 32 as we do not benefit from greater numbers.
    const limitedThreads = Math.min(desiredThreads, availableThreads, 32);
    logger(`Fetching bb wasm from ${wasmPath ?? 'default location'}`);
    const code = await (0, index_js_4.fetchCode)(shared, wasmPath);
    logger(`Compiling bb wasm of ${code.byteLength} bytes`);
    const module = await WebAssembly.compile(code);
    logger('Compilation of bb wasm complete');
    return { module, threads: limitedThreads };
}
exports.fetchModuleAndThreads = fetchModuleAndThreads;
async function getAvailableThreads(logger) {
    if (typeof navigator !== 'undefined' && navigator.hardwareConcurrency) {
        return navigator.hardwareConcurrency;
    }
    else {
        try {
            const os = await Promise.resolve().then(() => tslib_1.__importStar(require('os')));
            return os.cpus().length;
        }
        catch (e) {
            logger(`Could not detect environment to query number of threads. Falling back to one thread. Error: ${e.message ?? e}`);
            return 1;
        }
    }
}
class BarretenbergWasm extends index_js_3.BarretenbergWasmMain {
    /**
     * Construct and initialize BarretenbergWasm within a Worker. Return both the worker and the wasm proxy.
     * Used when running in the browser, because we can't block the main thread.
     */
    static async new(desiredThreads, wasmPath, logger = (0, debug_1.default)('bb.js:bb_wasm_main')) {
        const worker = (0, index_js_1.createMainWorker)();
        const wasm = (0, index_js_2.getRemoteBarretenbergWasm)(worker);
        const { module, threads } = await fetchModuleAndThreads(desiredThreads, wasmPath, logger);
        await wasm.init(module, threads, (0, comlink_1.proxy)(logger));
        return { worker, wasm };
    }
}
exports.BarretenbergWasm = BarretenbergWasm;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHFDQUFnQztBQUNoQywwREFBZ0M7QUFDaEMsNkVBQWtGO0FBQ2xGLHNEQUE4RjtBQUM5RixnRUFBcUc7QUFDckcsb0RBQWtEO0FBRTNDLEtBQUssVUFBVSxxQkFBcUIsQ0FDekMsY0FBYyxHQUFHLEVBQUUsRUFDbkIsUUFBaUIsRUFDakIsU0FBZ0MsSUFBQSxlQUFXLEVBQUMsaUJBQWlCLENBQUM7SUFFOUQsTUFBTSxNQUFNLEdBQUcsSUFBQSxtQ0FBd0IsR0FBRSxDQUFDO0lBRTFDLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEUsa0ZBQWtGO0lBQ2xGLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRXRFLE1BQU0sQ0FBQyx5QkFBeUIsUUFBUSxJQUFJLGtCQUFrQixFQUFFLENBQUMsQ0FBQztJQUNsRSxNQUFNLElBQUksR0FBRyxNQUFNLElBQUEsb0JBQVMsRUFBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0MsTUFBTSxDQUFDLHdCQUF3QixJQUFJLENBQUMsVUFBVSxRQUFRLENBQUMsQ0FBQztJQUN4RCxNQUFNLE1BQU0sR0FBRyxNQUFNLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsTUFBTSxDQUFDLGlDQUFpQyxDQUFDLENBQUM7SUFDMUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUM7QUFDN0MsQ0FBQztBQWpCRCxzREFpQkM7QUFFRCxLQUFLLFVBQVUsbUJBQW1CLENBQUMsTUFBNkI7SUFDOUQsSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDdEUsT0FBTyxTQUFTLENBQUMsbUJBQW1CLENBQUM7SUFDdkMsQ0FBQztTQUFNLENBQUM7UUFDTixJQUFJLENBQUM7WUFDSCxNQUFNLEVBQUUsR0FBRyxnRUFBYSxJQUFJLEdBQUMsQ0FBQztZQUM5QixPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDMUIsQ0FBQztRQUFDLE9BQU8sQ0FBTSxFQUFFLENBQUM7WUFDaEIsTUFBTSxDQUNKLCtGQUErRixDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUNoSCxDQUFDO1lBQ0YsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFhLGdCQUFpQixTQUFRLCtCQUFvQjtJQUN4RDs7O09BR0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FDckIsY0FBdUIsRUFDdkIsUUFBaUIsRUFDakIsU0FBZ0MsSUFBQSxlQUFXLEVBQUMsb0JBQW9CLENBQUM7UUFFakUsTUFBTSxNQUFNLEdBQUcsSUFBQSwyQkFBZ0IsR0FBRSxDQUFDO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUEsb0NBQXlCLEVBQTZCLE1BQU0sQ0FBQyxDQUFDO1FBQzNFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQyxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFGLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUEsZUFBSyxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDaEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBQ0Y7QUFoQkQsNENBZ0JDIn0=